diff -up webkit-1.4.3/Source/JavaScriptCore/yarr/YarrInterpreter.cpp.zero_position webkit-1.4.3/Source/JavaScriptCore/yarr/YarrInterpreter.cpp
--- webkit-1.4.3/Source/JavaScriptCore/yarr/YarrInterpreter.cpp.zero_position	2014-09-09 11:53:03.460030614 +0200
+++ webkit-1.4.3/Source/JavaScriptCore/yarr/YarrInterpreter.cpp	2014-09-09 11:55:31.410030742 +0200
@@ -1771,7 +1771,7 @@ public:
         m_currentAlternativeIndex = newAlternativeIndex;
     }
 
-    void emitDisjunction(PatternDisjunction* disjunction, unsigned inputCountAlreadyChecked = 0, unsigned parenthesesInputCountAlreadyChecked = 0, bool isParentheticalAssertion = false)
+    void emitDisjunction(PatternDisjunction* disjunction, unsigned inputCountAlreadyChecked = 0, unsigned parenthesesInputCountAlreadyChecked = 0)
     {
         for (unsigned alt = 0; alt < disjunction->m_alternatives.size(); ++alt) {
             unsigned currentCountAlreadyChecked = inputCountAlreadyChecked;
@@ -1786,12 +1786,7 @@ public:
             }
 
             unsigned minimumSize = alternative->m_minimumSize;
-            int countToCheck;
-
-            if (isParentheticalAssertion && parenthesesInputCountAlreadyChecked > minimumSize)
-                countToCheck = 0;
-            else
-                countToCheck = minimumSize - parenthesesInputCountAlreadyChecked;
+            int countToCheck = minimumSize - parenthesesInputCountAlreadyChecked;
 
             ASSERT(countToCheck >= 0);
             if (countToCheck) {
@@ -1871,7 +1866,7 @@ public:
                         uncheckAmount = 0;
 
                     atomParentheticalAssertionBegin(term.parentheses.subpatternId, term.invert(), term.frameLocation, alternativeFrameLocation);
-                    emitDisjunction(term.parentheses.disjunction, currentCountAlreadyChecked, positiveInputOffset, true);
+                    emitDisjunction(term.parentheses.disjunction, currentCountAlreadyChecked, positiveInputOffset - uncheckAmount);
                     atomParentheticalAssertionEnd(0, term.frameLocation, term.quantityCount, term.quantityType);
                     if (uncheckAmount) {
                         checkInput(uncheckAmount);
